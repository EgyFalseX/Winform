#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NestleICSales.DataSources.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Nestle")]
	public partial class dsLinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertSubchannel(Subchannel instance);
    partial void UpdateSubchannel(Subchannel instance);
    partial void DeleteSubchannel(Subchannel instance);
    partial void InsertCustomerGroup(CustomerGroup instance);
    partial void UpdateCustomerGroup(CustomerGroup instance);
    partial void DeleteCustomerGroup(CustomerGroup instance);
    partial void InsertCustomerType(CustomerType instance);
    partial void UpdateCustomerType(CustomerType instance);
    partial void DeleteCustomerType(CustomerType instance);
    partial void InsertCustomerType2(CustomerType2 instance);
    partial void UpdateCustomerType2(CustomerType2 instance);
    partial void DeleteCustomerType2(CustomerType2 instance);
    partial void InsertRouteBrand(RouteBrand instance);
    partial void UpdateRouteBrand(RouteBrand instance);
    partial void DeleteRouteBrand(RouteBrand instance);
    partial void InsertRouteStatus(RouteStatus instance);
    partial void UpdateRouteStatus(RouteStatus instance);
    partial void DeleteRouteStatus(RouteStatus instance);
    partial void InsertPlantSalesDistrict(PlantSalesDistrict instance);
    partial void UpdatePlantSalesDistrict(PlantSalesDistrict instance);
    partial void DeletePlantSalesDistrict(PlantSalesDistrict instance);
    partial void InsertPlant(Plant instance);
    partial void UpdatePlant(Plant instance);
    partial void DeletePlant(Plant instance);
    partial void InsertPlantBase(PlantBase instance);
    partial void UpdatePlantBase(PlantBase instance);
    partial void DeletePlantBase(PlantBase instance);
    partial void InsertPlantType(PlantType instance);
    partial void UpdatePlantType(PlantType instance);
    partial void DeletePlantType(PlantType instance);
    partial void InsertPlantTypeBase(PlantTypeBase instance);
    partial void UpdatePlantTypeBase(PlantTypeBase instance);
    partial void DeletePlantTypeBase(PlantTypeBase instance);
    partial void InsertProductBase(ProductBase instance);
    partial void UpdateProductBase(ProductBase instance);
    partial void DeleteProductBase(ProductBase instance);
    partial void InsertProductGroup3(ProductGroup3 instance);
    partial void UpdateProductGroup3(ProductGroup3 instance);
    partial void DeleteProductGroup3(ProductGroup3 instance);
    partial void InsertProductGroup2(ProductGroup2 instance);
    partial void UpdateProductGroup2(ProductGroup2 instance);
    partial void DeleteProductGroup2(ProductGroup2 instance);
    partial void InsertProductGroup1(ProductGroup1 instance);
    partial void UpdateProductGroup1(ProductGroup1 instance);
    partial void DeleteProductGroup1(ProductGroup1 instance);
    partial void InsertProductBrand(ProductBrand instance);
    partial void UpdateProductBrand(ProductBrand instance);
    partial void DeleteProductBrand(ProductBrand instance);
    partial void InsertProductBusinessUnit(ProductBusinessUnit instance);
    partial void UpdateProductBusinessUnit(ProductBusinessUnit instance);
    partial void DeleteProductBusinessUnit(ProductBusinessUnit instance);
    partial void InsertPriceChange(PriceChange instance);
    partial void UpdatePriceChange(PriceChange instance);
    partial void DeletePriceChange(PriceChange instance);
    partial void InsertPricePointRang(PricePointRang instance);
    partial void UpdatePricePointRang(PricePointRang instance);
    partial void DeletePricePointRang(PricePointRang instance);
    partial void InsertMaterialType(MaterialType instance);
    partial void UpdateMaterialType(MaterialType instance);
    partial void DeleteMaterialType(MaterialType instance);
    partial void InsertNPD(NPD instance);
    partial void UpdateNPD(NPD instance);
    partial void DeleteNPD(NPD instance);
    partial void InsertFlavor(Flavor instance);
    partial void UpdateFlavor(Flavor instance);
    partial void DeleteFlavor(Flavor instance);
    #endregion
		
		public dsLinqDataContext() : 
				base(global::NestleICSales.Properties.Settings.Default.MainConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dsLinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dsLinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dsLinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dsLinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<vQry001> vQry001s
		{
			get
			{
				return this.GetTable<vQry001>();
			}
		}
		
		public System.Data.Linq.Table<vQry002> vQry002s
		{
			get
			{
				return this.GetTable<vQry002>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<vQryCustHierLevel> vQryCustHierLevels
		{
			get
			{
				return this.GetTable<vQryCustHierLevel>();
			}
		}
		
		public System.Data.Linq.Table<Subchannel> Subchannels
		{
			get
			{
				return this.GetTable<Subchannel>();
			}
		}
		
		public System.Data.Linq.Table<CustomerGroup> CustomerGroups
		{
			get
			{
				return this.GetTable<CustomerGroup>();
			}
		}
		
		public System.Data.Linq.Table<CustomerType> CustomerTypes
		{
			get
			{
				return this.GetTable<CustomerType>();
			}
		}
		
		public System.Data.Linq.Table<CustomerType2> CustomerType2s
		{
			get
			{
				return this.GetTable<CustomerType2>();
			}
		}
		
		public System.Data.Linq.Table<RouteBrand> RouteBrands
		{
			get
			{
				return this.GetTable<RouteBrand>();
			}
		}
		
		public System.Data.Linq.Table<RouteStatus> RouteStatus
		{
			get
			{
				return this.GetTable<RouteStatus>();
			}
		}
		
		public System.Data.Linq.Table<PlantSalesDistrict> PlantSalesDistricts
		{
			get
			{
				return this.GetTable<PlantSalesDistrict>();
			}
		}
		
		public System.Data.Linq.Table<Plant> Plants
		{
			get
			{
				return this.GetTable<Plant>();
			}
		}
		
		public System.Data.Linq.Table<PlantBase> PlantBases
		{
			get
			{
				return this.GetTable<PlantBase>();
			}
		}
		
		public System.Data.Linq.Table<PlantType> PlantTypes
		{
			get
			{
				return this.GetTable<PlantType>();
			}
		}
		
		public System.Data.Linq.Table<PlantTypeBase> PlantTypeBases
		{
			get
			{
				return this.GetTable<PlantTypeBase>();
			}
		}
		
		public System.Data.Linq.Table<ProductBase> ProductBases
		{
			get
			{
				return this.GetTable<ProductBase>();
			}
		}
		
		public System.Data.Linq.Table<ProductGroup3> ProductGroup3s
		{
			get
			{
				return this.GetTable<ProductGroup3>();
			}
		}
		
		public System.Data.Linq.Table<ProductGroup2> ProductGroup2s
		{
			get
			{
				return this.GetTable<ProductGroup2>();
			}
		}
		
		public System.Data.Linq.Table<ProductGroup1> ProductGroup1s
		{
			get
			{
				return this.GetTable<ProductGroup1>();
			}
		}
		
		public System.Data.Linq.Table<ProductBrand> ProductBrands
		{
			get
			{
				return this.GetTable<ProductBrand>();
			}
		}
		
		public System.Data.Linq.Table<ProductBusinessUnit> ProductBusinessUnits
		{
			get
			{
				return this.GetTable<ProductBusinessUnit>();
			}
		}
		
		public System.Data.Linq.Table<PriceChange> PriceChanges
		{
			get
			{
				return this.GetTable<PriceChange>();
			}
		}
		
		public System.Data.Linq.Table<PricePointRang> PricePointRangs
		{
			get
			{
				return this.GetTable<PricePointRang>();
			}
		}
		
		public System.Data.Linq.Table<MaterialType> MaterialTypes
		{
			get
			{
				return this.GetTable<MaterialType>();
			}
		}
		
		public System.Data.Linq.Table<NPD> NPDs
		{
			get
			{
				return this.GetTable<NPD>();
			}
		}
		
		public System.Data.Linq.Table<Flavor> Flavors
		{
			get
			{
				return this.GetTable<Flavor>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vQry001")]
	public partial class vQry001
	{
		
		private int _CustomerId;
		
		private string _CustomerNameEn1;
		
		private string _CustomerNameEn2;
		
		private string _CustomerNameAr1;
		
		private string _CustomerNameAr2;
		
		private System.Nullable<int> _CustHierLevel6Id;
		
		private System.Nullable<System.DateTime> _CreationDate;
		
		private string _CustomerAddress;
		
		private System.Nullable<int> _CityId;
		
		private string _CustHierLevel6Name;
		
		private System.Nullable<int> _CustHierLevel5Id;
		
		private string _CustHierLevel5Name;
		
		private System.Nullable<int> _CustHierLevel4Id;
		
		private string _CustHierLevel4Name;
		
		private System.Nullable<int> _CustHierLevel3Id;
		
		private string _CustHierLevel3Name;
		
		private string _DistributionChannel;
		
		private string _CityEnName;
		
		private string _CityArName;
		
		private string _SubchannelName;
		
		private string _CustomerGroup;
		
		private string _CustomerType;
		
		private string _CustomerType2;
		
		public vQry001()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int NOT NULL")]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this._CustomerId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerNameEn1", DbType="NVarChar(100)")]
		public string CustomerNameEn1
		{
			get
			{
				return this._CustomerNameEn1;
			}
			set
			{
				if ((this._CustomerNameEn1 != value))
				{
					this._CustomerNameEn1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerNameEn2", DbType="NVarChar(100)")]
		public string CustomerNameEn2
		{
			get
			{
				return this._CustomerNameEn2;
			}
			set
			{
				if ((this._CustomerNameEn2 != value))
				{
					this._CustomerNameEn2 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerNameAr1", DbType="NVarChar(100)")]
		public string CustomerNameAr1
		{
			get
			{
				return this._CustomerNameAr1;
			}
			set
			{
				if ((this._CustomerNameAr1 != value))
				{
					this._CustomerNameAr1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerNameAr2", DbType="NVarChar(100)")]
		public string CustomerNameAr2
		{
			get
			{
				return this._CustomerNameAr2;
			}
			set
			{
				if ((this._CustomerNameAr2 != value))
				{
					this._CustomerNameAr2 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustHierLevel6Id", DbType="Int")]
		public System.Nullable<int> CustHierLevel6Id
		{
			get
			{
				return this._CustHierLevel6Id;
			}
			set
			{
				if ((this._CustHierLevel6Id != value))
				{
					this._CustHierLevel6Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this._CreationDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerAddress", DbType="NVarChar(100)")]
		public string CustomerAddress
		{
			get
			{
				return this._CustomerAddress;
			}
			set
			{
				if ((this._CustomerAddress != value))
				{
					this._CustomerAddress = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int")]
		public System.Nullable<int> CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					this._CityId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustHierLevel6Name", DbType="NVarChar(50)")]
		public string CustHierLevel6Name
		{
			get
			{
				return this._CustHierLevel6Name;
			}
			set
			{
				if ((this._CustHierLevel6Name != value))
				{
					this._CustHierLevel6Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustHierLevel5Id", DbType="Int")]
		public System.Nullable<int> CustHierLevel5Id
		{
			get
			{
				return this._CustHierLevel5Id;
			}
			set
			{
				if ((this._CustHierLevel5Id != value))
				{
					this._CustHierLevel5Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustHierLevel5Name", DbType="NVarChar(50)")]
		public string CustHierLevel5Name
		{
			get
			{
				return this._CustHierLevel5Name;
			}
			set
			{
				if ((this._CustHierLevel5Name != value))
				{
					this._CustHierLevel5Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustHierLevel4Id", DbType="Int")]
		public System.Nullable<int> CustHierLevel4Id
		{
			get
			{
				return this._CustHierLevel4Id;
			}
			set
			{
				if ((this._CustHierLevel4Id != value))
				{
					this._CustHierLevel4Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustHierLevel4Name", DbType="NVarChar(50)")]
		public string CustHierLevel4Name
		{
			get
			{
				return this._CustHierLevel4Name;
			}
			set
			{
				if ((this._CustHierLevel4Name != value))
				{
					this._CustHierLevel4Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustHierLevel3Id", DbType="Int")]
		public System.Nullable<int> CustHierLevel3Id
		{
			get
			{
				return this._CustHierLevel3Id;
			}
			set
			{
				if ((this._CustHierLevel3Id != value))
				{
					this._CustHierLevel3Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustHierLevel3Name", DbType="NVarChar(50)")]
		public string CustHierLevel3Name
		{
			get
			{
				return this._CustHierLevel3Name;
			}
			set
			{
				if ((this._CustHierLevel3Name != value))
				{
					this._CustHierLevel3Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistributionChannel", DbType="NVarChar(50)")]
		public string DistributionChannel
		{
			get
			{
				return this._DistributionChannel;
			}
			set
			{
				if ((this._DistributionChannel != value))
				{
					this._DistributionChannel = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityEnName", DbType="NVarChar(50)")]
		public string CityEnName
		{
			get
			{
				return this._CityEnName;
			}
			set
			{
				if ((this._CityEnName != value))
				{
					this._CityEnName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityArName", DbType="NVarChar(50)")]
		public string CityArName
		{
			get
			{
				return this._CityArName;
			}
			set
			{
				if ((this._CityArName != value))
				{
					this._CityArName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubchannelName", DbType="NVarChar(50)")]
		public string SubchannelName
		{
			get
			{
				return this._SubchannelName;
			}
			set
			{
				if ((this._SubchannelName != value))
				{
					this._SubchannelName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerGroup", DbType="NVarChar(50)")]
		public string CustomerGroup
		{
			get
			{
				return this._CustomerGroup;
			}
			set
			{
				if ((this._CustomerGroup != value))
				{
					this._CustomerGroup = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerType", DbType="NVarChar(50)")]
		public string CustomerType
		{
			get
			{
				return this._CustomerType;
			}
			set
			{
				if ((this._CustomerType != value))
				{
					this._CustomerType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerType2", DbType="NVarChar(50)")]
		public string CustomerType2
		{
			get
			{
				return this._CustomerType2;
			}
			set
			{
				if ((this._CustomerType2 != value))
				{
					this._CustomerType2 = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vQry002")]
	public partial class vQry002
	{
		
		private int _MaterialNumber;
		
		private string _MaterialName;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<double> _VolumPiece;
		
		private System.Nullable<double> _VolumCarton;
		
		private System.Nullable<double> _TradePriceCarton;
		
		private System.Nullable<double> _TradePricePiece;
		
		private System.Nullable<double> _ConsumerPriceCarton;
		
		private System.Nullable<double> _ConsumerPricePiece;
		
		private System.Nullable<int> _Pallet;
		
		private System.Nullable<double> _Split;
		
		private System.Nullable<System.DateTime> _ValidDateStart;
		
		private System.Nullable<System.DateTime> _ValidDateEnd;
		
		private System.Nullable<double> _PricePoint;
		
		private System.Nullable<double> _PricePointLastYear;
		
		private System.Nullable<double> _PricePointOldYear;
		
		private System.Nullable<int> _userin;
		
		private System.Nullable<System.DateTime> _datein;
		
		private string _Flavor;
		
		private string _MaterialType;
		
		private string _PriceChanges;
		
		private string _NPDS;
		
		private string _BaseProduct;
		
		private string _Brand;
		
		private string _BusinessUnit;
		
		private string _ProductGroup3;
		
		private string _ProductGroup2;
		
		private string _ProductGroup1;
		
		public vQry002()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialNumber", DbType="Int NOT NULL")]
		public int MaterialNumber
		{
			get
			{
				return this._MaterialNumber;
			}
			set
			{
				if ((this._MaterialNumber != value))
				{
					this._MaterialNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialName", DbType="NVarChar(50)")]
		public string MaterialName
		{
			get
			{
				return this._MaterialName;
			}
			set
			{
				if ((this._MaterialName != value))
				{
					this._MaterialName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this._Quantity = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolumPiece", DbType="Float")]
		public System.Nullable<double> VolumPiece
		{
			get
			{
				return this._VolumPiece;
			}
			set
			{
				if ((this._VolumPiece != value))
				{
					this._VolumPiece = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolumCarton", DbType="Float")]
		public System.Nullable<double> VolumCarton
		{
			get
			{
				return this._VolumCarton;
			}
			set
			{
				if ((this._VolumCarton != value))
				{
					this._VolumCarton = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TradePriceCarton", DbType="Float")]
		public System.Nullable<double> TradePriceCarton
		{
			get
			{
				return this._TradePriceCarton;
			}
			set
			{
				if ((this._TradePriceCarton != value))
				{
					this._TradePriceCarton = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TradePricePiece", DbType="Float")]
		public System.Nullable<double> TradePricePiece
		{
			get
			{
				return this._TradePricePiece;
			}
			set
			{
				if ((this._TradePricePiece != value))
				{
					this._TradePricePiece = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsumerPriceCarton", DbType="Float")]
		public System.Nullable<double> ConsumerPriceCarton
		{
			get
			{
				return this._ConsumerPriceCarton;
			}
			set
			{
				if ((this._ConsumerPriceCarton != value))
				{
					this._ConsumerPriceCarton = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsumerPricePiece", DbType="Float")]
		public System.Nullable<double> ConsumerPricePiece
		{
			get
			{
				return this._ConsumerPricePiece;
			}
			set
			{
				if ((this._ConsumerPricePiece != value))
				{
					this._ConsumerPricePiece = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pallet", DbType="Int")]
		public System.Nullable<int> Pallet
		{
			get
			{
				return this._Pallet;
			}
			set
			{
				if ((this._Pallet != value))
				{
					this._Pallet = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Split", DbType="Float")]
		public System.Nullable<double> Split
		{
			get
			{
				return this._Split;
			}
			set
			{
				if ((this._Split != value))
				{
					this._Split = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidDateStart", DbType="Date")]
		public System.Nullable<System.DateTime> ValidDateStart
		{
			get
			{
				return this._ValidDateStart;
			}
			set
			{
				if ((this._ValidDateStart != value))
				{
					this._ValidDateStart = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidDateEnd", DbType="Date")]
		public System.Nullable<System.DateTime> ValidDateEnd
		{
			get
			{
				return this._ValidDateEnd;
			}
			set
			{
				if ((this._ValidDateEnd != value))
				{
					this._ValidDateEnd = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PricePoint", DbType="Float")]
		public System.Nullable<double> PricePoint
		{
			get
			{
				return this._PricePoint;
			}
			set
			{
				if ((this._PricePoint != value))
				{
					this._PricePoint = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PricePointLastYear", DbType="Float")]
		public System.Nullable<double> PricePointLastYear
		{
			get
			{
				return this._PricePointLastYear;
			}
			set
			{
				if ((this._PricePointLastYear != value))
				{
					this._PricePointLastYear = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PricePointOldYear", DbType="Float")]
		public System.Nullable<double> PricePointOldYear
		{
			get
			{
				return this._PricePointOldYear;
			}
			set
			{
				if ((this._PricePointOldYear != value))
				{
					this._PricePointOldYear = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userin", DbType="Int")]
		public System.Nullable<int> userin
		{
			get
			{
				return this._userin;
			}
			set
			{
				if ((this._userin != value))
				{
					this._userin = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datein", DbType="DateTime")]
		public System.Nullable<System.DateTime> datein
		{
			get
			{
				return this._datein;
			}
			set
			{
				if ((this._datein != value))
				{
					this._datein = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flavor", DbType="NVarChar(50)")]
		public string Flavor
		{
			get
			{
				return this._Flavor;
			}
			set
			{
				if ((this._Flavor != value))
				{
					this._Flavor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialType", DbType="NVarChar(50)")]
		public string MaterialType
		{
			get
			{
				return this._MaterialType;
			}
			set
			{
				if ((this._MaterialType != value))
				{
					this._MaterialType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceChanges", DbType="NVarChar(50)")]
		public string PriceChanges
		{
			get
			{
				return this._PriceChanges;
			}
			set
			{
				if ((this._PriceChanges != value))
				{
					this._PriceChanges = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NPDS", DbType="NVarChar(50)")]
		public string NPDS
		{
			get
			{
				return this._NPDS;
			}
			set
			{
				if ((this._NPDS != value))
				{
					this._NPDS = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseProduct", DbType="NVarChar(50)")]
		public string BaseProduct
		{
			get
			{
				return this._BaseProduct;
			}
			set
			{
				if ((this._BaseProduct != value))
				{
					this._BaseProduct = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand", DbType="NVarChar(50)")]
		public string Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this._Brand = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessUnit", DbType="NVarChar(50)")]
		public string BusinessUnit
		{
			get
			{
				return this._BusinessUnit;
			}
			set
			{
				if ((this._BusinessUnit != value))
				{
					this._BusinessUnit = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductGroup3", DbType="NVarChar(50)")]
		public string ProductGroup3
		{
			get
			{
				return this._ProductGroup3;
			}
			set
			{
				if ((this._ProductGroup3 != value))
				{
					this._ProductGroup3 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductGroup2", DbType="NVarChar(50)")]
		public string ProductGroup2
		{
			get
			{
				return this._ProductGroup2;
			}
			set
			{
				if ((this._ProductGroup2 != value))
				{
					this._ProductGroup2 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductGroup1", DbType="NVarChar(50)")]
		public string ProductGroup1
		{
			get
			{
				return this._ProductGroup1;
			}
			set
			{
				if ((this._ProductGroup1 != value))
				{
					this._ProductGroup1 = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CityId;
		
		private string _CityEnName;
		
		private string _CityArName;
		
		private EntitySet<Customer> _Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIdChanging(int value);
    partial void OnCityIdChanged();
    partial void OnCityEnNameChanging(string value);
    partial void OnCityEnNameChanged();
    partial void OnCityArNameChanging(string value);
    partial void OnCityArNameChanged();
    #endregion
		
		public City()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityEnName", DbType="NVarChar(50)")]
		public string CityEnName
		{
			get
			{
				return this._CityEnName;
			}
			set
			{
				if ((this._CityEnName != value))
				{
					this.OnCityEnNameChanging(value);
					this.SendPropertyChanging();
					this._CityEnName = value;
					this.SendPropertyChanged("CityEnName");
					this.OnCityEnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityArName", DbType="NVarChar(50)")]
		public string CityArName
		{
			get
			{
				return this._CityArName;
			}
			set
			{
				if ((this._CityArName != value))
				{
					this.OnCityArNameChanging(value);
					this.SendPropertyChanging();
					this._CityArName = value;
					this.SendPropertyChanged("CityArName");
					this.OnCityArNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Customer", Storage="_Customers", ThisKey="CityId", OtherKey="CityId")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerId;
		
		private string _CustomerNameEn1;
		
		private string _CustomerNameEn2;
		
		private string _CustomerNameAr1;
		
		private string _CustomerNameAr2;
		
		private System.Nullable<int> _CustHierLevel6Id;
		
		private System.Nullable<int> _SubchannelId;
		
		private System.Nullable<int> _CustomerTypeId;
		
		private System.Nullable<int> _CustomerType2Id;
		
		private System.Nullable<int> _CustomerGroupId;
		
		private System.Nullable<System.DateTime> _CreationDate;
		
		private string _CustomerAddress;
		
		private System.Nullable<int> _CityId;
		
		private System.Nullable<int> _userin;
		
		private System.Nullable<System.DateTime> _datein;
		
		private EntityRef<City> _City;
		
		private EntityRef<Subchannel> _Subchannel;
		
		private EntityRef<CustomerGroup> _CustomerGroup;
		
		private EntityRef<CustomerType> _CustomerType;
		
		private EntityRef<CustomerType2> _CustomerType2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIdChanging(int value);
    partial void OnCustomerIdChanged();
    partial void OnCustomerNameEn1Changing(string value);
    partial void OnCustomerNameEn1Changed();
    partial void OnCustomerNameEn2Changing(string value);
    partial void OnCustomerNameEn2Changed();
    partial void OnCustomerNameAr1Changing(string value);
    partial void OnCustomerNameAr1Changed();
    partial void OnCustomerNameAr2Changing(string value);
    partial void OnCustomerNameAr2Changed();
    partial void OnCustHierLevel6IdChanging(System.Nullable<int> value);
    partial void OnCustHierLevel6IdChanged();
    partial void OnSubchannelIdChanging(System.Nullable<int> value);
    partial void OnSubchannelIdChanged();
    partial void OnCustomerTypeIdChanging(System.Nullable<int> value);
    partial void OnCustomerTypeIdChanged();
    partial void OnCustomerType2IdChanging(System.Nullable<int> value);
    partial void OnCustomerType2IdChanged();
    partial void OnCustomerGroupIdChanging(System.Nullable<int> value);
    partial void OnCustomerGroupIdChanged();
    partial void OnCreationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreationDateChanged();
    partial void OnCustomerAddressChanging(string value);
    partial void OnCustomerAddressChanged();
    partial void OnCityIdChanging(System.Nullable<int> value);
    partial void OnCityIdChanged();
    partial void OnuserinChanging(System.Nullable<int> value);
    partial void OnuserinChanged();
    partial void OndateinChanging(System.Nullable<System.DateTime> value);
    partial void OndateinChanged();
    #endregion
		
		public Customer()
		{
			this._City = default(EntityRef<City>);
			this._Subchannel = default(EntityRef<Subchannel>);
			this._CustomerGroup = default(EntityRef<CustomerGroup>);
			this._CustomerType = default(EntityRef<CustomerType>);
			this._CustomerType2 = default(EntityRef<CustomerType2>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerNameEn1", DbType="NVarChar(100)")]
		public string CustomerNameEn1
		{
			get
			{
				return this._CustomerNameEn1;
			}
			set
			{
				if ((this._CustomerNameEn1 != value))
				{
					this.OnCustomerNameEn1Changing(value);
					this.SendPropertyChanging();
					this._CustomerNameEn1 = value;
					this.SendPropertyChanged("CustomerNameEn1");
					this.OnCustomerNameEn1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerNameEn2", DbType="NVarChar(100)")]
		public string CustomerNameEn2
		{
			get
			{
				return this._CustomerNameEn2;
			}
			set
			{
				if ((this._CustomerNameEn2 != value))
				{
					this.OnCustomerNameEn2Changing(value);
					this.SendPropertyChanging();
					this._CustomerNameEn2 = value;
					this.SendPropertyChanged("CustomerNameEn2");
					this.OnCustomerNameEn2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerNameAr1", DbType="NVarChar(100)")]
		public string CustomerNameAr1
		{
			get
			{
				return this._CustomerNameAr1;
			}
			set
			{
				if ((this._CustomerNameAr1 != value))
				{
					this.OnCustomerNameAr1Changing(value);
					this.SendPropertyChanging();
					this._CustomerNameAr1 = value;
					this.SendPropertyChanged("CustomerNameAr1");
					this.OnCustomerNameAr1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerNameAr2", DbType="NVarChar(100)")]
		public string CustomerNameAr2
		{
			get
			{
				return this._CustomerNameAr2;
			}
			set
			{
				if ((this._CustomerNameAr2 != value))
				{
					this.OnCustomerNameAr2Changing(value);
					this.SendPropertyChanging();
					this._CustomerNameAr2 = value;
					this.SendPropertyChanged("CustomerNameAr2");
					this.OnCustomerNameAr2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustHierLevel6Id", DbType="Int")]
		public System.Nullable<int> CustHierLevel6Id
		{
			get
			{
				return this._CustHierLevel6Id;
			}
			set
			{
				if ((this._CustHierLevel6Id != value))
				{
					this.OnCustHierLevel6IdChanging(value);
					this.SendPropertyChanging();
					this._CustHierLevel6Id = value;
					this.SendPropertyChanged("CustHierLevel6Id");
					this.OnCustHierLevel6IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubchannelId", DbType="Int")]
		public System.Nullable<int> SubchannelId
		{
			get
			{
				return this._SubchannelId;
			}
			set
			{
				if ((this._SubchannelId != value))
				{
					if (this._Subchannel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubchannelIdChanging(value);
					this.SendPropertyChanging();
					this._SubchannelId = value;
					this.SendPropertyChanged("SubchannelId");
					this.OnSubchannelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerTypeId", DbType="Int")]
		public System.Nullable<int> CustomerTypeId
		{
			get
			{
				return this._CustomerTypeId;
			}
			set
			{
				if ((this._CustomerTypeId != value))
				{
					if (this._CustomerType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerTypeId = value;
					this.SendPropertyChanged("CustomerTypeId");
					this.OnCustomerTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerType2Id", DbType="Int")]
		public System.Nullable<int> CustomerType2Id
		{
			get
			{
				return this._CustomerType2Id;
			}
			set
			{
				if ((this._CustomerType2Id != value))
				{
					if (this._CustomerType2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerType2IdChanging(value);
					this.SendPropertyChanging();
					this._CustomerType2Id = value;
					this.SendPropertyChanged("CustomerType2Id");
					this.OnCustomerType2IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerGroupId", DbType="Int")]
		public System.Nullable<int> CustomerGroupId
		{
			get
			{
				return this._CustomerGroupId;
			}
			set
			{
				if ((this._CustomerGroupId != value))
				{
					if (this._CustomerGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerGroupIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerGroupId = value;
					this.SendPropertyChanged("CustomerGroupId");
					this.OnCustomerGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="Date")]
		public System.Nullable<System.DateTime> CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerAddress", DbType="NVarChar(100)")]
		public string CustomerAddress
		{
			get
			{
				return this._CustomerAddress;
			}
			set
			{
				if ((this._CustomerAddress != value))
				{
					this.OnCustomerAddressChanging(value);
					this.SendPropertyChanging();
					this._CustomerAddress = value;
					this.SendPropertyChanged("CustomerAddress");
					this.OnCustomerAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int")]
		public System.Nullable<int> CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userin", DbType="Int")]
		public System.Nullable<int> userin
		{
			get
			{
				return this._userin;
			}
			set
			{
				if ((this._userin != value))
				{
					this.OnuserinChanging(value);
					this.SendPropertyChanging();
					this._userin = value;
					this.SendPropertyChanged("userin");
					this.OnuserinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datein", DbType="DateTime")]
		public System.Nullable<System.DateTime> datein
		{
			get
			{
				return this._datein;
			}
			set
			{
				if ((this._datein != value))
				{
					this.OndateinChanging(value);
					this.SendPropertyChanging();
					this._datein = value;
					this.SendPropertyChanged("datein");
					this.OndateinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Customer", Storage="_City", ThisKey="CityId", OtherKey="CityId", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._CityId = value.CityId;
					}
					else
					{
						this._CityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subchannel_Customer", Storage="_Subchannel", ThisKey="SubchannelId", OtherKey="SubchannelId", IsForeignKey=true)]
		public Subchannel Subchannel
		{
			get
			{
				return this._Subchannel.Entity;
			}
			set
			{
				Subchannel previousValue = this._Subchannel.Entity;
				if (((previousValue != value) 
							|| (this._Subchannel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subchannel.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Subchannel.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._SubchannelId = value.SubchannelId;
					}
					else
					{
						this._SubchannelId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subchannel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerGroup_Customer", Storage="_CustomerGroup", ThisKey="CustomerGroupId", OtherKey="CustomerGroupId", IsForeignKey=true)]
		public CustomerGroup CustomerGroup
		{
			get
			{
				return this._CustomerGroup.Entity;
			}
			set
			{
				CustomerGroup previousValue = this._CustomerGroup.Entity;
				if (((previousValue != value) 
							|| (this._CustomerGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerGroup.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._CustomerGroup.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._CustomerGroupId = value.CustomerGroupId;
					}
					else
					{
						this._CustomerGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CustomerGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerType_Customer", Storage="_CustomerType", ThisKey="CustomerTypeId", OtherKey="CustomerTypeId", IsForeignKey=true)]
		public CustomerType CustomerType
		{
			get
			{
				return this._CustomerType.Entity;
			}
			set
			{
				CustomerType previousValue = this._CustomerType.Entity;
				if (((previousValue != value) 
							|| (this._CustomerType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerType.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._CustomerType.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._CustomerTypeId = value.CustomerTypeId;
					}
					else
					{
						this._CustomerTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CustomerType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerType2_Customer", Storage="_CustomerType2", ThisKey="CustomerType2Id", OtherKey="CustomerType2Id", IsForeignKey=true)]
		public CustomerType2 CustomerType2
		{
			get
			{
				return this._CustomerType2.Entity;
			}
			set
			{
				CustomerType2 previousValue = this._CustomerType2.Entity;
				if (((previousValue != value) 
							|| (this._CustomerType2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerType2.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._CustomerType2.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._CustomerType2Id = value.CustomerType2Id;
					}
					else
					{
						this._CustomerType2Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("CustomerType2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vQryCustHierLevel")]
	public partial class vQryCustHierLevel
	{
		
		private int _CustHierLevel6Id;
		
		private string _CustHierLevel6Name;
		
		private System.Nullable<int> _CustHierLevel5Id;
		
		private string _CustHierLevel5Name;
		
		private System.Nullable<int> _CustHierLevel4Id;
		
		private string _CustHierLevel4Name;
		
		private System.Nullable<int> _CustHierLevel3Id;
		
		private string _CustHierLevel3Name;
		
		private System.Nullable<short> _DistributionChannelId;
		
		private string _DistributionChannel;
		
		public vQryCustHierLevel()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustHierLevel6Id", DbType="Int NOT NULL")]
		public int CustHierLevel6Id
		{
			get
			{
				return this._CustHierLevel6Id;
			}
			set
			{
				if ((this._CustHierLevel6Id != value))
				{
					this._CustHierLevel6Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustHierLevel6Name", DbType="NVarChar(50)")]
		public string CustHierLevel6Name
		{
			get
			{
				return this._CustHierLevel6Name;
			}
			set
			{
				if ((this._CustHierLevel6Name != value))
				{
					this._CustHierLevel6Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustHierLevel5Id", DbType="Int")]
		public System.Nullable<int> CustHierLevel5Id
		{
			get
			{
				return this._CustHierLevel5Id;
			}
			set
			{
				if ((this._CustHierLevel5Id != value))
				{
					this._CustHierLevel5Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustHierLevel5Name", DbType="NVarChar(50)")]
		public string CustHierLevel5Name
		{
			get
			{
				return this._CustHierLevel5Name;
			}
			set
			{
				if ((this._CustHierLevel5Name != value))
				{
					this._CustHierLevel5Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustHierLevel4Id", DbType="Int")]
		public System.Nullable<int> CustHierLevel4Id
		{
			get
			{
				return this._CustHierLevel4Id;
			}
			set
			{
				if ((this._CustHierLevel4Id != value))
				{
					this._CustHierLevel4Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustHierLevel4Name", DbType="NVarChar(50)")]
		public string CustHierLevel4Name
		{
			get
			{
				return this._CustHierLevel4Name;
			}
			set
			{
				if ((this._CustHierLevel4Name != value))
				{
					this._CustHierLevel4Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustHierLevel3Id", DbType="Int")]
		public System.Nullable<int> CustHierLevel3Id
		{
			get
			{
				return this._CustHierLevel3Id;
			}
			set
			{
				if ((this._CustHierLevel3Id != value))
				{
					this._CustHierLevel3Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustHierLevel3Name", DbType="NVarChar(50)")]
		public string CustHierLevel3Name
		{
			get
			{
				return this._CustHierLevel3Name;
			}
			set
			{
				if ((this._CustHierLevel3Name != value))
				{
					this._CustHierLevel3Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistributionChannelId", DbType="SmallInt")]
		public System.Nullable<short> DistributionChannelId
		{
			get
			{
				return this._DistributionChannelId;
			}
			set
			{
				if ((this._DistributionChannelId != value))
				{
					this._DistributionChannelId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistributionChannel", DbType="NVarChar(50)")]
		public string DistributionChannel
		{
			get
			{
				return this._DistributionChannel;
			}
			set
			{
				if ((this._DistributionChannel != value))
				{
					this._DistributionChannel = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subchannel")]
	public partial class Subchannel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubchannelId;
		
		private string _SubchannelName;
		
		private EntitySet<Customer> _Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubchannelIdChanging(int value);
    partial void OnSubchannelIdChanged();
    partial void OnSubchannelNameChanging(string value);
    partial void OnSubchannelNameChanged();
    #endregion
		
		public Subchannel()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubchannelId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubchannelId
		{
			get
			{
				return this._SubchannelId;
			}
			set
			{
				if ((this._SubchannelId != value))
				{
					this.OnSubchannelIdChanging(value);
					this.SendPropertyChanging();
					this._SubchannelId = value;
					this.SendPropertyChanged("SubchannelId");
					this.OnSubchannelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubchannelName", DbType="NVarChar(50)")]
		public string SubchannelName
		{
			get
			{
				return this._SubchannelName;
			}
			set
			{
				if ((this._SubchannelName != value))
				{
					this.OnSubchannelNameChanging(value);
					this.SendPropertyChanging();
					this._SubchannelName = value;
					this.SendPropertyChanged("SubchannelName");
					this.OnSubchannelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subchannel_Customer", Storage="_Customers", ThisKey="SubchannelId", OtherKey="SubchannelId")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Subchannel = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Subchannel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerGroup")]
	public partial class CustomerGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerGroupId;
		
		private string _CustomerGroup1;
		
		private EntitySet<Customer> _Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerGroupIdChanging(int value);
    partial void OnCustomerGroupIdChanged();
    partial void OnCustomerGroup1Changing(string value);
    partial void OnCustomerGroup1Changed();
    #endregion
		
		public CustomerGroup()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerGroupId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CustomerGroupId
		{
			get
			{
				return this._CustomerGroupId;
			}
			set
			{
				if ((this._CustomerGroupId != value))
				{
					this.OnCustomerGroupIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerGroupId = value;
					this.SendPropertyChanged("CustomerGroupId");
					this.OnCustomerGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="CustomerGroup", Storage="_CustomerGroup1", DbType="NVarChar(50)")]
		public string CustomerGroup1
		{
			get
			{
				return this._CustomerGroup1;
			}
			set
			{
				if ((this._CustomerGroup1 != value))
				{
					this.OnCustomerGroup1Changing(value);
					this.SendPropertyChanging();
					this._CustomerGroup1 = value;
					this.SendPropertyChanged("CustomerGroup1");
					this.OnCustomerGroup1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerGroup_Customer", Storage="_Customers", ThisKey="CustomerGroupId", OtherKey="CustomerGroupId")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.CustomerGroup = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.CustomerGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerType")]
	public partial class CustomerType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerTypeId;
		
		private string _CustomerType1;
		
		private EntitySet<Customer> _Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerTypeIdChanging(int value);
    partial void OnCustomerTypeIdChanged();
    partial void OnCustomerType1Changing(string value);
    partial void OnCustomerType1Changed();
    #endregion
		
		public CustomerType()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CustomerTypeId
		{
			get
			{
				return this._CustomerTypeId;
			}
			set
			{
				if ((this._CustomerTypeId != value))
				{
					this.OnCustomerTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerTypeId = value;
					this.SendPropertyChanged("CustomerTypeId");
					this.OnCustomerTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="CustomerType", Storage="_CustomerType1", DbType="NVarChar(50)")]
		public string CustomerType1
		{
			get
			{
				return this._CustomerType1;
			}
			set
			{
				if ((this._CustomerType1 != value))
				{
					this.OnCustomerType1Changing(value);
					this.SendPropertyChanging();
					this._CustomerType1 = value;
					this.SendPropertyChanged("CustomerType1");
					this.OnCustomerType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerType_Customer", Storage="_Customers", ThisKey="CustomerTypeId", OtherKey="CustomerTypeId")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.CustomerType = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.CustomerType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerType2")]
	public partial class CustomerType2 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerType2Id;
		
		private string _CustomerType21;
		
		private EntitySet<Customer> _Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerType2IdChanging(int value);
    partial void OnCustomerType2IdChanged();
    partial void OnCustomerType21Changing(string value);
    partial void OnCustomerType21Changed();
    #endregion
		
		public CustomerType2()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerType2Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CustomerType2Id
		{
			get
			{
				return this._CustomerType2Id;
			}
			set
			{
				if ((this._CustomerType2Id != value))
				{
					this.OnCustomerType2IdChanging(value);
					this.SendPropertyChanging();
					this._CustomerType2Id = value;
					this.SendPropertyChanged("CustomerType2Id");
					this.OnCustomerType2IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="CustomerType2", Storage="_CustomerType21", DbType="NVarChar(50)")]
		public string CustomerType21
		{
			get
			{
				return this._CustomerType21;
			}
			set
			{
				if ((this._CustomerType21 != value))
				{
					this.OnCustomerType21Changing(value);
					this.SendPropertyChanging();
					this._CustomerType21 = value;
					this.SendPropertyChanged("CustomerType21");
					this.OnCustomerType21Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerType2_Customer", Storage="_Customers", ThisKey="CustomerType2Id", OtherKey="CustomerType2Id")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.CustomerType2 = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.CustomerType2 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RouteBrand")]
	public partial class RouteBrand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _RouteBrandId;
		
		private string _RouteBrand1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRouteBrandIdChanging(short value);
    partial void OnRouteBrandIdChanged();
    partial void OnRouteBrand1Changing(string value);
    partial void OnRouteBrand1Changed();
    #endregion
		
		public RouteBrand()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteBrandId", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short RouteBrandId
		{
			get
			{
				return this._RouteBrandId;
			}
			set
			{
				if ((this._RouteBrandId != value))
				{
					this.OnRouteBrandIdChanging(value);
					this.SendPropertyChanging();
					this._RouteBrandId = value;
					this.SendPropertyChanged("RouteBrandId");
					this.OnRouteBrandIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="RouteBrand", Storage="_RouteBrand1", DbType="NVarChar(50)")]
		public string RouteBrand1
		{
			get
			{
				return this._RouteBrand1;
			}
			set
			{
				if ((this._RouteBrand1 != value))
				{
					this.OnRouteBrand1Changing(value);
					this.SendPropertyChanging();
					this._RouteBrand1 = value;
					this.SendPropertyChanged("RouteBrand1");
					this.OnRouteBrand1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RouteStatus")]
	public partial class RouteStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _RouteStatusId;
		
		private string _RouteStatus1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRouteStatusIdChanging(short value);
    partial void OnRouteStatusIdChanged();
    partial void OnRouteStatus1Changing(string value);
    partial void OnRouteStatus1Changed();
    #endregion
		
		public RouteStatus()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteStatusId", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short RouteStatusId
		{
			get
			{
				return this._RouteStatusId;
			}
			set
			{
				if ((this._RouteStatusId != value))
				{
					this.OnRouteStatusIdChanging(value);
					this.SendPropertyChanging();
					this._RouteStatusId = value;
					this.SendPropertyChanged("RouteStatusId");
					this.OnRouteStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="RouteStatus", Storage="_RouteStatus1", DbType="NVarChar(50)")]
		public string RouteStatus1
		{
			get
			{
				return this._RouteStatus1;
			}
			set
			{
				if ((this._RouteStatus1 != value))
				{
					this.OnRouteStatus1Changing(value);
					this.SendPropertyChanging();
					this._RouteStatus1 = value;
					this.SendPropertyChanged("RouteStatus1");
					this.OnRouteStatus1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlantSalesDistrict")]
	public partial class PlantSalesDistrict : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _PlantSalesDistrictId;
		
		private string _PlantSalesDistrict1;
		
		private System.Nullable<short> _PlantId;
		
		private System.Nullable<short> _PlantTypeId;
		
		private EntityRef<Plant> _Plant;
		
		private EntityRef<PlantType> _PlantType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlantSalesDistrictIdChanging(short value);
    partial void OnPlantSalesDistrictIdChanged();
    partial void OnPlantSalesDistrict1Changing(string value);
    partial void OnPlantSalesDistrict1Changed();
    partial void OnPlantIdChanging(System.Nullable<short> value);
    partial void OnPlantIdChanged();
    partial void OnPlantTypeIdChanging(System.Nullable<short> value);
    partial void OnPlantTypeIdChanged();
    #endregion
		
		public PlantSalesDistrict()
		{
			this._Plant = default(EntityRef<Plant>);
			this._PlantType = default(EntityRef<PlantType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantSalesDistrictId", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short PlantSalesDistrictId
		{
			get
			{
				return this._PlantSalesDistrictId;
			}
			set
			{
				if ((this._PlantSalesDistrictId != value))
				{
					this.OnPlantSalesDistrictIdChanging(value);
					this.SendPropertyChanging();
					this._PlantSalesDistrictId = value;
					this.SendPropertyChanged("PlantSalesDistrictId");
					this.OnPlantSalesDistrictIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PlantSalesDistrict", Storage="_PlantSalesDistrict1", DbType="NVarChar(50)")]
		public string PlantSalesDistrict1
		{
			get
			{
				return this._PlantSalesDistrict1;
			}
			set
			{
				if ((this._PlantSalesDistrict1 != value))
				{
					this.OnPlantSalesDistrict1Changing(value);
					this.SendPropertyChanging();
					this._PlantSalesDistrict1 = value;
					this.SendPropertyChanged("PlantSalesDistrict1");
					this.OnPlantSalesDistrict1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantId", DbType="SmallInt")]
		public System.Nullable<short> PlantId
		{
			get
			{
				return this._PlantId;
			}
			set
			{
				if ((this._PlantId != value))
				{
					if (this._Plant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlantIdChanging(value);
					this.SendPropertyChanging();
					this._PlantId = value;
					this.SendPropertyChanged("PlantId");
					this.OnPlantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantTypeId", DbType="SmallInt")]
		public System.Nullable<short> PlantTypeId
		{
			get
			{
				return this._PlantTypeId;
			}
			set
			{
				if ((this._PlantTypeId != value))
				{
					if (this._PlantType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlantTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PlantTypeId = value;
					this.SendPropertyChanged("PlantTypeId");
					this.OnPlantTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plant_PlantSalesDistrict", Storage="_Plant", ThisKey="PlantId", OtherKey="PlantId", IsForeignKey=true)]
		public Plant Plant
		{
			get
			{
				return this._Plant.Entity;
			}
			set
			{
				Plant previousValue = this._Plant.Entity;
				if (((previousValue != value) 
							|| (this._Plant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Plant.Entity = null;
						previousValue.PlantSalesDistricts.Remove(this);
					}
					this._Plant.Entity = value;
					if ((value != null))
					{
						value.PlantSalesDistricts.Add(this);
						this._PlantId = value.PlantId;
					}
					else
					{
						this._PlantId = default(Nullable<short>);
					}
					this.SendPropertyChanged("Plant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlantType_PlantSalesDistrict", Storage="_PlantType", ThisKey="PlantTypeId", OtherKey="PlantTypeId", IsForeignKey=true)]
		public PlantType PlantType
		{
			get
			{
				return this._PlantType.Entity;
			}
			set
			{
				PlantType previousValue = this._PlantType.Entity;
				if (((previousValue != value) 
							|| (this._PlantType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlantType.Entity = null;
						previousValue.PlantSalesDistricts.Remove(this);
					}
					this._PlantType.Entity = value;
					if ((value != null))
					{
						value.PlantSalesDistricts.Add(this);
						this._PlantTypeId = value.PlantTypeId;
					}
					else
					{
						this._PlantTypeId = default(Nullable<short>);
					}
					this.SendPropertyChanged("PlantType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Plant")]
	public partial class Plant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _PlantId;
		
		private string _PlantName;
		
		private System.Nullable<int> _PlantBaseId;
		
		private string _SapName;
		
		private EntitySet<PlantSalesDistrict> _PlantSalesDistricts;
		
		private EntityRef<PlantBase> _PlantBase;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlantIdChanging(short value);
    partial void OnPlantIdChanged();
    partial void OnPlantNameChanging(string value);
    partial void OnPlantNameChanged();
    partial void OnPlantBaseIdChanging(System.Nullable<int> value);
    partial void OnPlantBaseIdChanged();
    partial void OnSapNameChanging(string value);
    partial void OnSapNameChanged();
    #endregion
		
		public Plant()
		{
			this._PlantSalesDistricts = new EntitySet<PlantSalesDistrict>(new Action<PlantSalesDistrict>(this.attach_PlantSalesDistricts), new Action<PlantSalesDistrict>(this.detach_PlantSalesDistricts));
			this._PlantBase = default(EntityRef<PlantBase>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantId", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short PlantId
		{
			get
			{
				return this._PlantId;
			}
			set
			{
				if ((this._PlantId != value))
				{
					this.OnPlantIdChanging(value);
					this.SendPropertyChanging();
					this._PlantId = value;
					this.SendPropertyChanged("PlantId");
					this.OnPlantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantName", DbType="NVarChar(50)")]
		public string PlantName
		{
			get
			{
				return this._PlantName;
			}
			set
			{
				if ((this._PlantName != value))
				{
					this.OnPlantNameChanging(value);
					this.SendPropertyChanging();
					this._PlantName = value;
					this.SendPropertyChanged("PlantName");
					this.OnPlantNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantBaseId", DbType="Int")]
		public System.Nullable<int> PlantBaseId
		{
			get
			{
				return this._PlantBaseId;
			}
			set
			{
				if ((this._PlantBaseId != value))
				{
					if (this._PlantBase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlantBaseIdChanging(value);
					this.SendPropertyChanging();
					this._PlantBaseId = value;
					this.SendPropertyChanged("PlantBaseId");
					this.OnPlantBaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SapName", DbType="NVarChar(10)")]
		public string SapName
		{
			get
			{
				return this._SapName;
			}
			set
			{
				if ((this._SapName != value))
				{
					this.OnSapNameChanging(value);
					this.SendPropertyChanging();
					this._SapName = value;
					this.SendPropertyChanged("SapName");
					this.OnSapNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plant_PlantSalesDistrict", Storage="_PlantSalesDistricts", ThisKey="PlantId", OtherKey="PlantId")]
		public EntitySet<PlantSalesDistrict> PlantSalesDistricts
		{
			get
			{
				return this._PlantSalesDistricts;
			}
			set
			{
				this._PlantSalesDistricts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlantBase_Plant", Storage="_PlantBase", ThisKey="PlantBaseId", OtherKey="PlantBaseId", IsForeignKey=true)]
		public PlantBase PlantBase
		{
			get
			{
				return this._PlantBase.Entity;
			}
			set
			{
				PlantBase previousValue = this._PlantBase.Entity;
				if (((previousValue != value) 
							|| (this._PlantBase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlantBase.Entity = null;
						previousValue.Plants.Remove(this);
					}
					this._PlantBase.Entity = value;
					if ((value != null))
					{
						value.Plants.Add(this);
						this._PlantBaseId = value.PlantBaseId;
					}
					else
					{
						this._PlantBaseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PlantBase");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlantSalesDistricts(PlantSalesDistrict entity)
		{
			this.SendPropertyChanging();
			entity.Plant = this;
		}
		
		private void detach_PlantSalesDistricts(PlantSalesDistrict entity)
		{
			this.SendPropertyChanging();
			entity.Plant = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlantBase")]
	public partial class PlantBase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlantBaseId;
		
		private string _PlantBaseName;
		
		private System.Nullable<short> _DistributionChannelId;
		
		private EntitySet<Plant> _Plants;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlantBaseIdChanging(int value);
    partial void OnPlantBaseIdChanged();
    partial void OnPlantBaseNameChanging(string value);
    partial void OnPlantBaseNameChanged();
    partial void OnDistributionChannelIdChanging(System.Nullable<short> value);
    partial void OnDistributionChannelIdChanged();
    #endregion
		
		public PlantBase()
		{
			this._Plants = new EntitySet<Plant>(new Action<Plant>(this.attach_Plants), new Action<Plant>(this.detach_Plants));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantBaseId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlantBaseId
		{
			get
			{
				return this._PlantBaseId;
			}
			set
			{
				if ((this._PlantBaseId != value))
				{
					this.OnPlantBaseIdChanging(value);
					this.SendPropertyChanging();
					this._PlantBaseId = value;
					this.SendPropertyChanged("PlantBaseId");
					this.OnPlantBaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantBaseName", DbType="NVarChar(100)")]
		public string PlantBaseName
		{
			get
			{
				return this._PlantBaseName;
			}
			set
			{
				if ((this._PlantBaseName != value))
				{
					this.OnPlantBaseNameChanging(value);
					this.SendPropertyChanging();
					this._PlantBaseName = value;
					this.SendPropertyChanged("PlantBaseName");
					this.OnPlantBaseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistributionChannelId", DbType="SmallInt")]
		public System.Nullable<short> DistributionChannelId
		{
			get
			{
				return this._DistributionChannelId;
			}
			set
			{
				if ((this._DistributionChannelId != value))
				{
					this.OnDistributionChannelIdChanging(value);
					this.SendPropertyChanging();
					this._DistributionChannelId = value;
					this.SendPropertyChanged("DistributionChannelId");
					this.OnDistributionChannelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlantBase_Plant", Storage="_Plants", ThisKey="PlantBaseId", OtherKey="PlantBaseId")]
		public EntitySet<Plant> Plants
		{
			get
			{
				return this._Plants;
			}
			set
			{
				this._Plants.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Plants(Plant entity)
		{
			this.SendPropertyChanging();
			entity.PlantBase = this;
		}
		
		private void detach_Plants(Plant entity)
		{
			this.SendPropertyChanging();
			entity.PlantBase = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlantType")]
	public partial class PlantType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _PlantTypeId;
		
		private string _PlantType1;
		
		private System.Nullable<short> _PlantTypeBaseId;
		
		private EntitySet<PlantSalesDistrict> _PlantSalesDistricts;
		
		private EntityRef<PlantTypeBase> _PlantTypeBase;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlantTypeIdChanging(short value);
    partial void OnPlantTypeIdChanged();
    partial void OnPlantType1Changing(string value);
    partial void OnPlantType1Changed();
    partial void OnPlantTypeBaseIdChanging(System.Nullable<short> value);
    partial void OnPlantTypeBaseIdChanged();
    #endregion
		
		public PlantType()
		{
			this._PlantSalesDistricts = new EntitySet<PlantSalesDistrict>(new Action<PlantSalesDistrict>(this.attach_PlantSalesDistricts), new Action<PlantSalesDistrict>(this.detach_PlantSalesDistricts));
			this._PlantTypeBase = default(EntityRef<PlantTypeBase>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantTypeId", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short PlantTypeId
		{
			get
			{
				return this._PlantTypeId;
			}
			set
			{
				if ((this._PlantTypeId != value))
				{
					this.OnPlantTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PlantTypeId = value;
					this.SendPropertyChanged("PlantTypeId");
					this.OnPlantTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PlantType", Storage="_PlantType1", DbType="NVarChar(50)")]
		public string PlantType1
		{
			get
			{
				return this._PlantType1;
			}
			set
			{
				if ((this._PlantType1 != value))
				{
					this.OnPlantType1Changing(value);
					this.SendPropertyChanging();
					this._PlantType1 = value;
					this.SendPropertyChanged("PlantType1");
					this.OnPlantType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantTypeBaseId", DbType="SmallInt")]
		public System.Nullable<short> PlantTypeBaseId
		{
			get
			{
				return this._PlantTypeBaseId;
			}
			set
			{
				if ((this._PlantTypeBaseId != value))
				{
					if (this._PlantTypeBase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlantTypeBaseIdChanging(value);
					this.SendPropertyChanging();
					this._PlantTypeBaseId = value;
					this.SendPropertyChanged("PlantTypeBaseId");
					this.OnPlantTypeBaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlantType_PlantSalesDistrict", Storage="_PlantSalesDistricts", ThisKey="PlantTypeId", OtherKey="PlantTypeId")]
		public EntitySet<PlantSalesDistrict> PlantSalesDistricts
		{
			get
			{
				return this._PlantSalesDistricts;
			}
			set
			{
				this._PlantSalesDistricts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlantTypeBase_PlantType", Storage="_PlantTypeBase", ThisKey="PlantTypeBaseId", OtherKey="PlantTypeBaseId", IsForeignKey=true)]
		public PlantTypeBase PlantTypeBase
		{
			get
			{
				return this._PlantTypeBase.Entity;
			}
			set
			{
				PlantTypeBase previousValue = this._PlantTypeBase.Entity;
				if (((previousValue != value) 
							|| (this._PlantTypeBase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlantTypeBase.Entity = null;
						previousValue.PlantTypes.Remove(this);
					}
					this._PlantTypeBase.Entity = value;
					if ((value != null))
					{
						value.PlantTypes.Add(this);
						this._PlantTypeBaseId = value.PlantTypeBaseId;
					}
					else
					{
						this._PlantTypeBaseId = default(Nullable<short>);
					}
					this.SendPropertyChanged("PlantTypeBase");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlantSalesDistricts(PlantSalesDistrict entity)
		{
			this.SendPropertyChanging();
			entity.PlantType = this;
		}
		
		private void detach_PlantSalesDistricts(PlantSalesDistrict entity)
		{
			this.SendPropertyChanging();
			entity.PlantType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlantTypeBase")]
	public partial class PlantTypeBase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _PlantTypeBaseId;
		
		private string _PlantTypeBase1;
		
		private EntitySet<PlantType> _PlantTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlantTypeBaseIdChanging(short value);
    partial void OnPlantTypeBaseIdChanged();
    partial void OnPlantTypeBase1Changing(string value);
    partial void OnPlantTypeBase1Changed();
    #endregion
		
		public PlantTypeBase()
		{
			this._PlantTypes = new EntitySet<PlantType>(new Action<PlantType>(this.attach_PlantTypes), new Action<PlantType>(this.detach_PlantTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantTypeBaseId", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short PlantTypeBaseId
		{
			get
			{
				return this._PlantTypeBaseId;
			}
			set
			{
				if ((this._PlantTypeBaseId != value))
				{
					this.OnPlantTypeBaseIdChanging(value);
					this.SendPropertyChanging();
					this._PlantTypeBaseId = value;
					this.SendPropertyChanged("PlantTypeBaseId");
					this.OnPlantTypeBaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PlantTypeBase", Storage="_PlantTypeBase1", DbType="NVarChar(50)")]
		public string PlantTypeBase1
		{
			get
			{
				return this._PlantTypeBase1;
			}
			set
			{
				if ((this._PlantTypeBase1 != value))
				{
					this.OnPlantTypeBase1Changing(value);
					this.SendPropertyChanging();
					this._PlantTypeBase1 = value;
					this.SendPropertyChanged("PlantTypeBase1");
					this.OnPlantTypeBase1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlantTypeBase_PlantType", Storage="_PlantTypes", ThisKey="PlantTypeBaseId", OtherKey="PlantTypeBaseId")]
		public EntitySet<PlantType> PlantTypes
		{
			get
			{
				return this._PlantTypes;
			}
			set
			{
				this._PlantTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlantTypes(PlantType entity)
		{
			this.SendPropertyChanging();
			entity.PlantTypeBase = this;
		}
		
		private void detach_PlantTypes(PlantType entity)
		{
			this.SendPropertyChanging();
			entity.PlantTypeBase = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductBase")]
	public partial class ProductBase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductBaseId;
		
		private string _ProductBase1;
		
		private System.Nullable<short> _ProductGroup3Id;
		
		private System.Nullable<short> _BrandId;
		
		private System.Nullable<double> _PricePoint;
		
		private EntityRef<ProductGroup3> _ProductGroup3;
		
		private EntityRef<ProductBrand> _ProductBrand;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductBaseIdChanging(int value);
    partial void OnProductBaseIdChanged();
    partial void OnProductBase1Changing(string value);
    partial void OnProductBase1Changed();
    partial void OnProductGroup3IdChanging(System.Nullable<short> value);
    partial void OnProductGroup3IdChanged();
    partial void OnBrandIdChanging(System.Nullable<short> value);
    partial void OnBrandIdChanged();
    partial void OnPricePointChanging(System.Nullable<double> value);
    partial void OnPricePointChanged();
    #endregion
		
		public ProductBase()
		{
			this._ProductGroup3 = default(EntityRef<ProductGroup3>);
			this._ProductBrand = default(EntityRef<ProductBrand>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductBaseId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductBaseId
		{
			get
			{
				return this._ProductBaseId;
			}
			set
			{
				if ((this._ProductBaseId != value))
				{
					this.OnProductBaseIdChanging(value);
					this.SendPropertyChanging();
					this._ProductBaseId = value;
					this.SendPropertyChanged("ProductBaseId");
					this.OnProductBaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ProductBase", Storage="_ProductBase1", DbType="NVarChar(50)")]
		public string ProductBase1
		{
			get
			{
				return this._ProductBase1;
			}
			set
			{
				if ((this._ProductBase1 != value))
				{
					this.OnProductBase1Changing(value);
					this.SendPropertyChanging();
					this._ProductBase1 = value;
					this.SendPropertyChanged("ProductBase1");
					this.OnProductBase1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductGroup3Id", DbType="SmallInt")]
		public System.Nullable<short> ProductGroup3Id
		{
			get
			{
				return this._ProductGroup3Id;
			}
			set
			{
				if ((this._ProductGroup3Id != value))
				{
					if (this._ProductGroup3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductGroup3IdChanging(value);
					this.SendPropertyChanging();
					this._ProductGroup3Id = value;
					this.SendPropertyChanged("ProductGroup3Id");
					this.OnProductGroup3IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrandId", DbType="SmallInt")]
		public System.Nullable<short> BrandId
		{
			get
			{
				return this._BrandId;
			}
			set
			{
				if ((this._BrandId != value))
				{
					if (this._ProductBrand.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBrandIdChanging(value);
					this.SendPropertyChanging();
					this._BrandId = value;
					this.SendPropertyChanged("BrandId");
					this.OnBrandIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PricePoint", DbType="Float")]
		public System.Nullable<double> PricePoint
		{
			get
			{
				return this._PricePoint;
			}
			set
			{
				if ((this._PricePoint != value))
				{
					this.OnPricePointChanging(value);
					this.SendPropertyChanging();
					this._PricePoint = value;
					this.SendPropertyChanged("PricePoint");
					this.OnPricePointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductGroup3_ProductBase", Storage="_ProductGroup3", ThisKey="ProductGroup3Id", OtherKey="ProductGroup3Id", IsForeignKey=true)]
		public ProductGroup3 ProductGroup3
		{
			get
			{
				return this._ProductGroup3.Entity;
			}
			set
			{
				ProductGroup3 previousValue = this._ProductGroup3.Entity;
				if (((previousValue != value) 
							|| (this._ProductGroup3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductGroup3.Entity = null;
						previousValue.ProductBases.Remove(this);
					}
					this._ProductGroup3.Entity = value;
					if ((value != null))
					{
						value.ProductBases.Add(this);
						this._ProductGroup3Id = value.ProductGroup3Id;
					}
					else
					{
						this._ProductGroup3Id = default(Nullable<short>);
					}
					this.SendPropertyChanged("ProductGroup3");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductBrand_ProductBase", Storage="_ProductBrand", ThisKey="BrandId", OtherKey="BrandId", IsForeignKey=true)]
		public ProductBrand ProductBrand
		{
			get
			{
				return this._ProductBrand.Entity;
			}
			set
			{
				ProductBrand previousValue = this._ProductBrand.Entity;
				if (((previousValue != value) 
							|| (this._ProductBrand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductBrand.Entity = null;
						previousValue.ProductBases.Remove(this);
					}
					this._ProductBrand.Entity = value;
					if ((value != null))
					{
						value.ProductBases.Add(this);
						this._BrandId = value.BrandId;
					}
					else
					{
						this._BrandId = default(Nullable<short>);
					}
					this.SendPropertyChanged("ProductBrand");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductGroup3")]
	public partial class ProductGroup3 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ProductGroup3Id;
		
		private string _ProductGroup31;
		
		private System.Nullable<short> _ProductGroup2Id;
		
		private EntitySet<ProductBase> _ProductBases;
		
		private EntityRef<ProductGroup2> _ProductGroup2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductGroup3IdChanging(short value);
    partial void OnProductGroup3IdChanged();
    partial void OnProductGroup31Changing(string value);
    partial void OnProductGroup31Changed();
    partial void OnProductGroup2IdChanging(System.Nullable<short> value);
    partial void OnProductGroup2IdChanged();
    #endregion
		
		public ProductGroup3()
		{
			this._ProductBases = new EntitySet<ProductBase>(new Action<ProductBase>(this.attach_ProductBases), new Action<ProductBase>(this.detach_ProductBases));
			this._ProductGroup2 = default(EntityRef<ProductGroup2>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductGroup3Id", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ProductGroup3Id
		{
			get
			{
				return this._ProductGroup3Id;
			}
			set
			{
				if ((this._ProductGroup3Id != value))
				{
					this.OnProductGroup3IdChanging(value);
					this.SendPropertyChanging();
					this._ProductGroup3Id = value;
					this.SendPropertyChanged("ProductGroup3Id");
					this.OnProductGroup3IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ProductGroup3", Storage="_ProductGroup31", DbType="NVarChar(50)")]
		public string ProductGroup31
		{
			get
			{
				return this._ProductGroup31;
			}
			set
			{
				if ((this._ProductGroup31 != value))
				{
					this.OnProductGroup31Changing(value);
					this.SendPropertyChanging();
					this._ProductGroup31 = value;
					this.SendPropertyChanged("ProductGroup31");
					this.OnProductGroup31Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductGroup2Id", DbType="SmallInt")]
		public System.Nullable<short> ProductGroup2Id
		{
			get
			{
				return this._ProductGroup2Id;
			}
			set
			{
				if ((this._ProductGroup2Id != value))
				{
					if (this._ProductGroup2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductGroup2IdChanging(value);
					this.SendPropertyChanging();
					this._ProductGroup2Id = value;
					this.SendPropertyChanged("ProductGroup2Id");
					this.OnProductGroup2IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductGroup3_ProductBase", Storage="_ProductBases", ThisKey="ProductGroup3Id", OtherKey="ProductGroup3Id")]
		public EntitySet<ProductBase> ProductBases
		{
			get
			{
				return this._ProductBases;
			}
			set
			{
				this._ProductBases.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductGroup2_ProductGroup3", Storage="_ProductGroup2", ThisKey="ProductGroup2Id", OtherKey="ProductGroup2Id", IsForeignKey=true)]
		public ProductGroup2 ProductGroup2
		{
			get
			{
				return this._ProductGroup2.Entity;
			}
			set
			{
				ProductGroup2 previousValue = this._ProductGroup2.Entity;
				if (((previousValue != value) 
							|| (this._ProductGroup2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductGroup2.Entity = null;
						previousValue.ProductGroup3s.Remove(this);
					}
					this._ProductGroup2.Entity = value;
					if ((value != null))
					{
						value.ProductGroup3s.Add(this);
						this._ProductGroup2Id = value.ProductGroup2Id;
					}
					else
					{
						this._ProductGroup2Id = default(Nullable<short>);
					}
					this.SendPropertyChanged("ProductGroup2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductBases(ProductBase entity)
		{
			this.SendPropertyChanging();
			entity.ProductGroup3 = this;
		}
		
		private void detach_ProductBases(ProductBase entity)
		{
			this.SendPropertyChanging();
			entity.ProductGroup3 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductGroup2")]
	public partial class ProductGroup2 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ProductGroup2Id;
		
		private string _ProductGroup21;
		
		private System.Nullable<short> _ProductGroup1;
		
		private EntitySet<ProductGroup3> _ProductGroup3s;
		
		private EntityRef<ProductGroup1> _ProductGroup11;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductGroup2IdChanging(short value);
    partial void OnProductGroup2IdChanged();
    partial void OnProductGroup21Changing(string value);
    partial void OnProductGroup21Changed();
    partial void OnProductGroup1Changing(System.Nullable<short> value);
    partial void OnProductGroup1Changed();
    #endregion
		
		public ProductGroup2()
		{
			this._ProductGroup3s = new EntitySet<ProductGroup3>(new Action<ProductGroup3>(this.attach_ProductGroup3s), new Action<ProductGroup3>(this.detach_ProductGroup3s));
			this._ProductGroup11 = default(EntityRef<ProductGroup1>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductGroup2Id", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ProductGroup2Id
		{
			get
			{
				return this._ProductGroup2Id;
			}
			set
			{
				if ((this._ProductGroup2Id != value))
				{
					this.OnProductGroup2IdChanging(value);
					this.SendPropertyChanging();
					this._ProductGroup2Id = value;
					this.SendPropertyChanged("ProductGroup2Id");
					this.OnProductGroup2IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ProductGroup2", Storage="_ProductGroup21", DbType="NVarChar(50)")]
		public string ProductGroup21
		{
			get
			{
				return this._ProductGroup21;
			}
			set
			{
				if ((this._ProductGroup21 != value))
				{
					this.OnProductGroup21Changing(value);
					this.SendPropertyChanging();
					this._ProductGroup21 = value;
					this.SendPropertyChanged("ProductGroup21");
					this.OnProductGroup21Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductGroup1", DbType="SmallInt")]
		public System.Nullable<short> ProductGroup1
		{
			get
			{
				return this._ProductGroup1;
			}
			set
			{
				if ((this._ProductGroup1 != value))
				{
					if (this._ProductGroup11.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductGroup1Changing(value);
					this.SendPropertyChanging();
					this._ProductGroup1 = value;
					this.SendPropertyChanged("ProductGroup1");
					this.OnProductGroup1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductGroup2_ProductGroup3", Storage="_ProductGroup3s", ThisKey="ProductGroup2Id", OtherKey="ProductGroup2Id")]
		public EntitySet<ProductGroup3> ProductGroup3s
		{
			get
			{
				return this._ProductGroup3s;
			}
			set
			{
				this._ProductGroup3s.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductGroup1_ProductGroup2", Storage="_ProductGroup11", ThisKey="ProductGroup1", OtherKey="ProductGroup1Id", IsForeignKey=true)]
		public ProductGroup1 ProductGroup11
		{
			get
			{
				return this._ProductGroup11.Entity;
			}
			set
			{
				ProductGroup1 previousValue = this._ProductGroup11.Entity;
				if (((previousValue != value) 
							|| (this._ProductGroup11.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductGroup11.Entity = null;
						previousValue.ProductGroup2s.Remove(this);
					}
					this._ProductGroup11.Entity = value;
					if ((value != null))
					{
						value.ProductGroup2s.Add(this);
						this._ProductGroup1 = value.ProductGroup1Id;
					}
					else
					{
						this._ProductGroup1 = default(Nullable<short>);
					}
					this.SendPropertyChanged("ProductGroup11");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductGroup3s(ProductGroup3 entity)
		{
			this.SendPropertyChanging();
			entity.ProductGroup2 = this;
		}
		
		private void detach_ProductGroup3s(ProductGroup3 entity)
		{
			this.SendPropertyChanging();
			entity.ProductGroup2 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductGroup1")]
	public partial class ProductGroup1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ProductGroup1Id;
		
		private string _ProductGroup11;
		
		private EntitySet<ProductGroup2> _ProductGroup2s;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductGroup1IdChanging(short value);
    partial void OnProductGroup1IdChanged();
    partial void OnProductGroup11Changing(string value);
    partial void OnProductGroup11Changed();
    #endregion
		
		public ProductGroup1()
		{
			this._ProductGroup2s = new EntitySet<ProductGroup2>(new Action<ProductGroup2>(this.attach_ProductGroup2s), new Action<ProductGroup2>(this.detach_ProductGroup2s));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductGroup1Id", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ProductGroup1Id
		{
			get
			{
				return this._ProductGroup1Id;
			}
			set
			{
				if ((this._ProductGroup1Id != value))
				{
					this.OnProductGroup1IdChanging(value);
					this.SendPropertyChanging();
					this._ProductGroup1Id = value;
					this.SendPropertyChanged("ProductGroup1Id");
					this.OnProductGroup1IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ProductGroup1", Storage="_ProductGroup11", DbType="NVarChar(50)")]
		public string ProductGroup11
		{
			get
			{
				return this._ProductGroup11;
			}
			set
			{
				if ((this._ProductGroup11 != value))
				{
					this.OnProductGroup11Changing(value);
					this.SendPropertyChanging();
					this._ProductGroup11 = value;
					this.SendPropertyChanged("ProductGroup11");
					this.OnProductGroup11Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductGroup1_ProductGroup2", Storage="_ProductGroup2s", ThisKey="ProductGroup1Id", OtherKey="ProductGroup1")]
		public EntitySet<ProductGroup2> ProductGroup2s
		{
			get
			{
				return this._ProductGroup2s;
			}
			set
			{
				this._ProductGroup2s.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductGroup2s(ProductGroup2 entity)
		{
			this.SendPropertyChanging();
			entity.ProductGroup11 = this;
		}
		
		private void detach_ProductGroup2s(ProductGroup2 entity)
		{
			this.SendPropertyChanging();
			entity.ProductGroup11 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductBrand")]
	public partial class ProductBrand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _BrandId;
		
		private string _Brand;
		
		private System.Nullable<short> _ProductBusinessUnitId;
		
		private EntitySet<ProductBase> _ProductBases;
		
		private EntityRef<ProductBusinessUnit> _ProductBusinessUnit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBrandIdChanging(short value);
    partial void OnBrandIdChanged();
    partial void OnBrandChanging(string value);
    partial void OnBrandChanged();
    partial void OnProductBusinessUnitIdChanging(System.Nullable<short> value);
    partial void OnProductBusinessUnitIdChanged();
    #endregion
		
		public ProductBrand()
		{
			this._ProductBases = new EntitySet<ProductBase>(new Action<ProductBase>(this.attach_ProductBases), new Action<ProductBase>(this.detach_ProductBases));
			this._ProductBusinessUnit = default(EntityRef<ProductBusinessUnit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrandId", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short BrandId
		{
			get
			{
				return this._BrandId;
			}
			set
			{
				if ((this._BrandId != value))
				{
					this.OnBrandIdChanging(value);
					this.SendPropertyChanging();
					this._BrandId = value;
					this.SendPropertyChanged("BrandId");
					this.OnBrandIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand", DbType="NVarChar(50)")]
		public string Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this.OnBrandChanging(value);
					this.SendPropertyChanging();
					this._Brand = value;
					this.SendPropertyChanged("Brand");
					this.OnBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductBusinessUnitId", DbType="SmallInt")]
		public System.Nullable<short> ProductBusinessUnitId
		{
			get
			{
				return this._ProductBusinessUnitId;
			}
			set
			{
				if ((this._ProductBusinessUnitId != value))
				{
					if (this._ProductBusinessUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductBusinessUnitIdChanging(value);
					this.SendPropertyChanging();
					this._ProductBusinessUnitId = value;
					this.SendPropertyChanged("ProductBusinessUnitId");
					this.OnProductBusinessUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductBrand_ProductBase", Storage="_ProductBases", ThisKey="BrandId", OtherKey="BrandId")]
		public EntitySet<ProductBase> ProductBases
		{
			get
			{
				return this._ProductBases;
			}
			set
			{
				this._ProductBases.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductBusinessUnit_ProductBrand", Storage="_ProductBusinessUnit", ThisKey="ProductBusinessUnitId", OtherKey="ProductBusinessUnitId", IsForeignKey=true)]
		public ProductBusinessUnit ProductBusinessUnit
		{
			get
			{
				return this._ProductBusinessUnit.Entity;
			}
			set
			{
				ProductBusinessUnit previousValue = this._ProductBusinessUnit.Entity;
				if (((previousValue != value) 
							|| (this._ProductBusinessUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductBusinessUnit.Entity = null;
						previousValue.ProductBrands.Remove(this);
					}
					this._ProductBusinessUnit.Entity = value;
					if ((value != null))
					{
						value.ProductBrands.Add(this);
						this._ProductBusinessUnitId = value.ProductBusinessUnitId;
					}
					else
					{
						this._ProductBusinessUnitId = default(Nullable<short>);
					}
					this.SendPropertyChanged("ProductBusinessUnit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductBases(ProductBase entity)
		{
			this.SendPropertyChanging();
			entity.ProductBrand = this;
		}
		
		private void detach_ProductBases(ProductBase entity)
		{
			this.SendPropertyChanging();
			entity.ProductBrand = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductBusinessUnit")]
	public partial class ProductBusinessUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ProductBusinessUnitId;
		
		private string _ProductBusinessUnit1;
		
		private EntitySet<ProductBrand> _ProductBrands;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductBusinessUnitIdChanging(short value);
    partial void OnProductBusinessUnitIdChanged();
    partial void OnProductBusinessUnit1Changing(string value);
    partial void OnProductBusinessUnit1Changed();
    #endregion
		
		public ProductBusinessUnit()
		{
			this._ProductBrands = new EntitySet<ProductBrand>(new Action<ProductBrand>(this.attach_ProductBrands), new Action<ProductBrand>(this.detach_ProductBrands));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductBusinessUnitId", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ProductBusinessUnitId
		{
			get
			{
				return this._ProductBusinessUnitId;
			}
			set
			{
				if ((this._ProductBusinessUnitId != value))
				{
					this.OnProductBusinessUnitIdChanging(value);
					this.SendPropertyChanging();
					this._ProductBusinessUnitId = value;
					this.SendPropertyChanged("ProductBusinessUnitId");
					this.OnProductBusinessUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ProductBusinessUnit", Storage="_ProductBusinessUnit1", DbType="NVarChar(50)")]
		public string ProductBusinessUnit1
		{
			get
			{
				return this._ProductBusinessUnit1;
			}
			set
			{
				if ((this._ProductBusinessUnit1 != value))
				{
					this.OnProductBusinessUnit1Changing(value);
					this.SendPropertyChanging();
					this._ProductBusinessUnit1 = value;
					this.SendPropertyChanged("ProductBusinessUnit1");
					this.OnProductBusinessUnit1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductBusinessUnit_ProductBrand", Storage="_ProductBrands", ThisKey="ProductBusinessUnitId", OtherKey="ProductBusinessUnitId")]
		public EntitySet<ProductBrand> ProductBrands
		{
			get
			{
				return this._ProductBrands;
			}
			set
			{
				this._ProductBrands.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductBrands(ProductBrand entity)
		{
			this.SendPropertyChanging();
			entity.ProductBusinessUnit = this;
		}
		
		private void detach_ProductBrands(ProductBrand entity)
		{
			this.SendPropertyChanging();
			entity.ProductBusinessUnit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PriceChanges")]
	public partial class PriceChange : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _PriceChangesId;
		
		private string _PriceChanges;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPriceChangesIdChanging(short value);
    partial void OnPriceChangesIdChanged();
    partial void OnPriceChangesChanging(string value);
    partial void OnPriceChangesChanged();
    #endregion
		
		public PriceChange()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceChangesId", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short PriceChangesId
		{
			get
			{
				return this._PriceChangesId;
			}
			set
			{
				if ((this._PriceChangesId != value))
				{
					this.OnPriceChangesIdChanging(value);
					this.SendPropertyChanging();
					this._PriceChangesId = value;
					this.SendPropertyChanged("PriceChangesId");
					this.OnPriceChangesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceChanges", DbType="NVarChar(50)")]
		public string PriceChanges
		{
			get
			{
				return this._PriceChanges;
			}
			set
			{
				if ((this._PriceChanges != value))
				{
					this.OnPriceChangesChanging(value);
					this.SendPropertyChanging();
					this._PriceChanges = value;
					this.SendPropertyChanged("PriceChanges");
					this.OnPriceChangesChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PricePointRang")]
	public partial class PricePointRang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _PricePointRangId;
		
		private string _PricePointRang1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPricePointRangIdChanging(short value);
    partial void OnPricePointRangIdChanged();
    partial void OnPricePointRang1Changing(string value);
    partial void OnPricePointRang1Changed();
    #endregion
		
		public PricePointRang()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PricePointRangId", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short PricePointRangId
		{
			get
			{
				return this._PricePointRangId;
			}
			set
			{
				if ((this._PricePointRangId != value))
				{
					this.OnPricePointRangIdChanging(value);
					this.SendPropertyChanging();
					this._PricePointRangId = value;
					this.SendPropertyChanged("PricePointRangId");
					this.OnPricePointRangIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PricePointRang", Storage="_PricePointRang1", DbType="NVarChar(50)")]
		public string PricePointRang1
		{
			get
			{
				return this._PricePointRang1;
			}
			set
			{
				if ((this._PricePointRang1 != value))
				{
					this.OnPricePointRang1Changing(value);
					this.SendPropertyChanging();
					this._PricePointRang1 = value;
					this.SendPropertyChanged("PricePointRang1");
					this.OnPricePointRang1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MaterialType")]
	public partial class MaterialType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _MaterialTypeId;
		
		private string _MaterialType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaterialTypeIdChanging(short value);
    partial void OnMaterialTypeIdChanged();
    partial void OnMaterialType1Changing(string value);
    partial void OnMaterialType1Changed();
    #endregion
		
		public MaterialType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialTypeId", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short MaterialTypeId
		{
			get
			{
				return this._MaterialTypeId;
			}
			set
			{
				if ((this._MaterialTypeId != value))
				{
					this.OnMaterialTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MaterialTypeId = value;
					this.SendPropertyChanged("MaterialTypeId");
					this.OnMaterialTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="MaterialType", Storage="_MaterialType1", DbType="NVarChar(50)")]
		public string MaterialType1
		{
			get
			{
				return this._MaterialType1;
			}
			set
			{
				if ((this._MaterialType1 != value))
				{
					this.OnMaterialType1Changing(value);
					this.SendPropertyChanging();
					this._MaterialType1 = value;
					this.SendPropertyChanged("MaterialType1");
					this.OnMaterialType1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NPDS")]
	public partial class NPD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _NPDSId;
		
		private string _NPDS;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNPDSIdChanging(short value);
    partial void OnNPDSIdChanged();
    partial void OnNPDSChanging(string value);
    partial void OnNPDSChanged();
    #endregion
		
		public NPD()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NPDSId", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short NPDSId
		{
			get
			{
				return this._NPDSId;
			}
			set
			{
				if ((this._NPDSId != value))
				{
					this.OnNPDSIdChanging(value);
					this.SendPropertyChanging();
					this._NPDSId = value;
					this.SendPropertyChanged("NPDSId");
					this.OnNPDSIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NPDS", DbType="NVarChar(50)")]
		public string NPDS
		{
			get
			{
				return this._NPDS;
			}
			set
			{
				if ((this._NPDS != value))
				{
					this.OnNPDSChanging(value);
					this.SendPropertyChanging();
					this._NPDS = value;
					this.SendPropertyChanged("NPDS");
					this.OnNPDSChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Flavor")]
	public partial class Flavor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _FlavorId;
		
		private string _Flavor1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFlavorIdChanging(short value);
    partial void OnFlavorIdChanged();
    partial void OnFlavor1Changing(string value);
    partial void OnFlavor1Changed();
    #endregion
		
		public Flavor()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlavorId", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short FlavorId
		{
			get
			{
				return this._FlavorId;
			}
			set
			{
				if ((this._FlavorId != value))
				{
					this.OnFlavorIdChanging(value);
					this.SendPropertyChanging();
					this._FlavorId = value;
					this.SendPropertyChanged("FlavorId");
					this.OnFlavorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Flavor", Storage="_Flavor1", DbType="NVarChar(50)")]
		public string Flavor1
		{
			get
			{
				return this._Flavor1;
			}
			set
			{
				if ((this._Flavor1 != value))
				{
					this.OnFlavor1Changing(value);
					this.SendPropertyChanging();
					this._Flavor1 = value;
					this.SendPropertyChanged("Flavor1");
					this.OnFlavor1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
